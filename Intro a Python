Intro a Python
El notebook pude visualizar markdown y latex (formulas matematicas)
Tb puedes utilizar Shell
Y puedes pasarle variables de Python a Shell
  #Syntax
    - path = 'your_path' #python variable
    - !ls #shell command in the notebook
    - !ls {path} #python variable with shell
Leveque - videos
%lsmagic

isinstance() we can check if a object is a certain class
  isinstance(5, int) >. True

conversion
  int()
  float()
  str()
casting: automatic conversion made by python

arithmetic operators
  + sum
  - substract
  * multiply
  / divide
  // divide whole number
  % reminder
  ** to the power
.

Retaltional operatiors
  == #is equal
  != #not equal to
  <= #less or equal
  <  #less
  is #references same object
  is not
.

Logical operators
  & #and
  and
  | #or
  or
  True ^ True #False
  '' #empty is false
  bool() #returns either True or False
.

dir()
  dir(__builtins__) #show built in functions
  pip
  dir(random) #all the functions in the random library
.

basic modules
  math #mathematics
  random #generate random numbers
  re #regex
  sys #specific parameters between Python and the system
  os #os system functions
  #shortcut library.tab shows functions
.

function
  eval() #interpretates the result as a Python expression
  #executes a string as a python code
.

memoria en python
id() >> identidad o referencia de un objeto (donde esta guardada la variable, una posicion de memoria)
hex(id(1)) >> en hexidecimal
ejemplo:
  a = []
  b = a
  id(a) == id(b) #True
  a.append(3)
  id(a) no cambia, id(b) no cambia
  Como cambiar eso?
  b = a.copy()
  Crea una nueva posicion de memoria para b
.

&&Strings
''' >> string en varias lineas
funciona la "" y ''

print("Hello", "world") #Hello world
print("Hello, "world", sep='') #Helloworld

a = 15
f'tengo {a} datos' #permite meter variables en strings
... bueno para debugging

f'Con 2 decimales: {pi:.2f}'

a.replace('b', 'P')
a.index('u') posicion de el string
a = hola
"".join(variable) #h o l a
a.join(" ") # hola

s[-1] # ultimo caracter de un string
s[1:] # 1 a todo
s[:] # todos los caracteres
s[2:10:2] # de 2 a 10 y de 2 en 2
s[::-1] #string invertido
s.replace('algo', 'otro') #replaces 1 for 2
los strings son inmutables #cambia el id siempre
dir(s) #todos los atributos del objeto
s.count('string')


&&Lists
a = [] or list()
a[::-1] inverts list

unpacking lists
lista = [3, 'nubes', 2.15, 'lluvia']
a, b, c, d = lista
a = 3 ...
a, *_ = lista
a = 3
_ = todo lo demas #se usa para variables que no necesitamos y podemos prescindir
b, *_ lista[::-1]
*_, b = lista # ultimo elemento y el resto
lista = [[a]]
lista_b = [*lista] #[a] en una nueva posicion de memoria

&&range
range() built in function que da un rango
a = range(0, 10)
objeto range

pop >> sacar datos de una lista
a.append('a') # agrega un dato
insert (indice, string)
a.remove('string') #removes all the string

b = a.append(3) #append modifica la a > inplace
0 in a #know if it's in the list

List comprenhension
[i fro i in range(100) if i%7==0] #todos los numeros divisibles por 7 hasta el 100
  #en vez de
    lista = []
    for 1 in range(100):
      if 1%7==0:
        lista.append(i)
    lista

&&TUPLES
a = (a, b, c)
son inmutables
pero se pueden modificar los objetos que contengan las tuplas
se pueden anidar con +

&&SETS
a = {'python', 'R', 'C++'}
b = {'java', 'javascript', 'python', 'R'}
a.intersection(b) #{'R', 'python'}
a.difference(b) #a - b
c = {'java', 'javascript'}
c.issubset(a) #false
a.issuperset(c) #contiene todo y mas

&DICCIONARIOS (hash)
for name,numer zip
dic.keys
dic.values
dic.items()

def myStats(list_numbers):
  return max(list_numbers)

myStats([1,2,3,4,5])

def myStats(list_numbers):
  return max(list_numbers),min(list_numbers)

v = [1,2,3,4,5,6,7]
min_v, max_v = myStats(v)

BEST WAY:
def myStats(list_numbers):
  '''
    explanation
  '''
return {'min': min(list_numbers)
        'mean': #avg
        'max': max(list_numbers)
}

stats = myStats
variable = stats['max'] #10

unpacking in for loop

list_of_lists = [[1,2,3],[4,5,6],[7,8,9]]
for a, b, c in list_of_lists
  print(list_)














